
#ifndef ARRAYEMPLOYEES_H_
#define ARRAYEMPLOYEES_H_
#include <stdio.h>
#define FREE 0
#define OCCUPIED 1
#include "gets.h"
#include <string.h>

struct
{
	int id;
	char name[51];
	char lastName[51];
	float salary;
	int sector;
	int isEmpty;

}typedef Employee;
/**
 * @fn int initEmployees(Employee[], int)
 * @brief Inicializa el campo isEmpty en 0 para indicar que todas las posiciones del array estan vacias
 *
 * @param Array de empleados
 * @param Tamaño del array
 * @return Devuelve -1 si hubo error, 0 si esta ok
 */

int initEmployees(Employee[],int);
/**
 * @fn int searchFreeEmployee(Employee[], int)
 * @brief Busca la primera posicion libre que se encuentre en el array
 *
 * @param Array de empleados
 * @param Tamaño del array
 * @return Devuelve la primera posicion libre que encontro, sino encontro ninguna posicion libre devuelve -1
 */

int searchFreeEmployee(Employee[],int);
/**
 * @fn int findEmployeeById(Employee[], int, int)
 * @brief Busca un empleado recibiendo como parámetro su id
 *
 * @param Array de empleados
 * @param Tamaño del array
 * @param Id del empleado
 * @return Devuelve la posicion del empleado, devuelve -1 sino la encontro
 */

int findEmployeeById(Employee[],int,int);
/**
 * @fn int generateId(int, int)
 * @brief Genera id automaticamente
 *
 * @param Contador de empleados
 * @param Id de inicio que marca el comienzo del contador
 * @return devuelve el id resultado de la suma entre el contador y el id de inicio
 */
int generateId(int,int);

/**
 * @fn Employee registerAnEmployee(Employee[], int, int, int)
 * @brief Registra un empleado
 *
 * @param Array de empleados
 * @param Tamaño del array
 * @param Contador de empleados
 * @param Id de inicio
 * @return Devuelve un empleado cargado con todos sus datos
 */
Employee registerAnEmployee(Employee[],int,int,int);

/**
 * @fn int loadEmployee(Employee[], int, int, int)
 * @brief Carga a un empleado
 *
 * @param Array de empleados
 * @param Tamaño del array
 * @param Contador de empleados
 * @param Id inicio
 * @return Devuelve 1 si logro cargar los datos, caso contrario devuelve -1
 */
int loadEmployee(Employee[],int,int,int);

/**
 * @fn int addEmployees(Employee[], int, int, char[], char[], float, int)
 * @brief Añade a un array de empleados existente los valores recibidos como parametro en la primer posicion libre
 *
 * @param Array de empleados
 * @param Tamaño del array
 * @param Id del empleado
 * @param Nombre del empleado
 * @param Apellido del empleado
 * @param Salario del empleado
 * @param Sector del empleado
 * @return Devuelve 0 si logro añadir, caso contrario devuelve -1
 */

int addEmployees(Employee[],int,int,char[],char[],float,int);

/**
 * @fn int getIdEmployeeDelete(char[], char[], char[], char[], Employee[], int)
 * @brief Pide id existente en el array de empleados para eliminar o no a un empleado con ese id
 *
 * @param mensaje
 * @param id solicitado
 * @param mensaje de error
 * @param
 * @param
 * @param
 * @return
 */
int getIdEmployeeDelete(char[],char[],char[],char[],Employee[],int);
int getIdEmployeeModify(char[],char[],char[],char[],Employee[],int);
int modifyEmployee(Employee[],int,int);
int removeEmployee(Employee[],int,int);
int sortEmployeeByLastName(Employee[],int,int);
int sortEmployeeBySector(Employee[],int,int);
int printEmployee(Employee[],int);
int printAnEmployee(Employee);
int searchIdEmployee(Employee[],int,int);
int menuOrdenamiento(char[],char[],char[],Employee[],int,char[]);
float calculateAverage(int,int);
float calculateSalaryAverage(Employee[],int);
int printAverageSalary(Employee[],int);
float calculateTotalSalary(Employee[],int);
int printTotalSalary(Employee[],int);
int printEmployeeExceedsAverageSalary(Employee[],int);
int countEmployeeExceedsAverageSalary(Employee[],int);
#endif /* ARRAYEMPLOYEES_H_ */
